pdiet_train = data.frame(pdiet_train1)
pdiet_train[sapply(pdiet_train, is.character)] <- lapply(pdiet_train[sapply(pdiet_train, is.character)],
as.factor)
str(pdiet_train)
lm_fit2 = lm(formula = pregnancy_weight_gain ~ ., data = pdiet_train)
str(pdiet_train)
typeof(pdiet_train$other_babies)
typeof(pdiet_train$melon_amount)
typeof(pdiet_train$mother_education)
pdiet_train$mother_education
str(pdiet_train)
str(pdiet_train)[100,153]
str(pdiet_train)
nlevels(pdiet_train)
nlevels(pdiet_train[sapply(pdiet_train, is.factor)])
nlevels(pdiet_train$mother_education)
for (i in colnames(pdiet_train)){
if (nlevels(pdiet_train$i) <2) {
print(i)
}
}
nlevels(pdiet_train$peach_freq)
for (i in colnames(pdiet_train)){
print(nlevels(i))
}
for (i in colnames(pdiet_train)){
print(nlevels(i), i)
}
for (i in colnames(pdiet_train)){
print(nlevels(i))
print(i)
}
pdiet_train[sapply(pdiet_train, is.character)] <- lapply(pdiet_train[sapply(pdiet_train, is.character)],
as.factor)
summary(ridge_fit)
# print summary
summary(lm_fit)
spec(pdiet_train)
spec(pdiet_train)
pdiet_train[sapply(pdiet_train, is.character)] <- lapply(pdiet_train[sapply(pdiet_train, is.character)],
as.factor)
spec(pdiet_train)
str(pdiet_train)
pdiet_train1 = read_csv("./../data/clean/pdiet_train.csv", show_col_types = FALSE)
pdiet_train1 %>% select(is.character==TRUE)
pdiet_train1 %>% select(is.character()==TRUE)
pdiet_train1 %>% select(is.character(pdiet_train1)==TRUE)
spec(pdiet_train1)
str(pdiet_train1)
pdiet_train1 = read_csv("./../data/clean/pdiet_train.csv")
library(tidyverse)  # tidyverse
library(ggrepel)    # for scatter plot point labels
library(kableExtra) # for printing tables
library(cowplot)    # for side by side plots
library(corrplot) # correlation plots
# raincloud plots
if (!require(remotes)) {
install.packages("remotes")
}
remotes::install_github('jorvlan/raincloudplots')
library(raincloudplots)
library(dplyr)
library(readr)
library(stringr)
source("functions/R_rainclouds.R")
# load cleaned data
pdiet_data = read.csv("./../data/clean/pregnancy_data.csv")
# correlation matrices for DHP variables
# subset only DHP variables
pdiet_DHP = pdiet_data[,substr(colnames(pdiet_data), 1, 3)=="DHP"]
# calculate correlation and make plot
corr = cor(pdiet_DHP)
DHP_corr = corrplot(corr, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 0.7)
DHP_corr
corrplot(corr, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 0.7)
corrplot(corr, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45, tl.cex = 0.7)
# calculate median weight gain
median_weight_gain = pdiet_data %>%
summarise(median(pregnancy_weight_gain)) %>%
pull()
median_weight_gain
corr
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix(corr)
flattenCorrMatrix(corr$r, corr$P)
# calculate correlation and make plot
corr = rcorr(pdiet_DHP)
# calculate correlation and make plot
corr = rcor(pdiet_DHP)
library("Hmisc")
# calculate correlation and make plot
corr = rcorr(pdiet_DHP)
flattenCorrMatrix <- function(cormat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut]
)
}
flattenCorrMatrix(corr)
flattenCorrMatrix(corr) %>% slice_max(n = 5)
flattenCorrMatrix(corr) %>% slice_max()
flattenCorrMatrix(corr)
flattenCorrMatrix(corr) %>% slice_max(cor, n=5)
flattenCorrMatrix(corr) %>% slice_max(cor, n=10)
pdiet_data_raw = read.csv("./../data/raw/pregnancy_data.csv")
pdiet_data_raw = read.csv("./../data/raw/pregnancy_diet.csv")
View(pdiet_data_raw)
colnames(pdiet_data_raw)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # tidyverse
library(ggrepel)    # for scatter plot point labels
library(kableExtra) # for printing tables
library(cowplot)    # for side by side plots
library(plyr)
library(dplyr)
# load raw data
pdiet_raw = read.csv("~/pregnancy-weight-gain-final-project/data/raw/pregnancy_diet.csv")
pdiet1 = pdiet_raw[,substr(colnames(pdiet_raw), 1, 3)=="DHP"]
View(pdiet1)
colnames(pdiet_raw)-4
substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-4, nchar(colnames(pdiet_raw)))
substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-8, nchar(colnames(pdiet_raw)))
pdiet2 = pdiet1[,substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-8, nchar(colnames(pdiet_raw)))!="frequency"]
pdiet2 = pdiet1[,substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-8, nchar(colnames(pdiet_raw)))=="frequency"]
View(pdiet2)
pdiet2 = pdiet1[,substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-8, nchar(colnames(pdiet_raw)))!="frequency"]
pdiet2 = pdiet1[,-substr(colnames(pdiet_raw), nchar(colnames(pdiet_raw))-8, nchar(colnames(pdiet_raw)))=="frequency"]
View(pdiet_DHP)
pdiet1 = pdiet_raw[,substr(colnames(pdiet_raw), 1, 3)=="DHP" && typeof(colnames(pdiet_raw))="double"]
pdiet1 = pdiet_raw[,substr(colnames(pdiet_raw), 1, 3)=="DHP" && typeof(colnames(pdiet_raw))=="double"]
typeof(colnames(pdiet_raw))=="double"
colnames(pdiet_raw)
pdiet1 = pdiet_raw[,substr(colnames(pdiet_raw), 1, 3)=="DHP" && typeof()=="double"]
pdiet_raw %>% select(typeof()=="double")
pdiet_raw %>% select_if(is.numeric)
pdiet1 = pdiet_raw %>% select_if(is.numeric)
pdiet2 = pdiet1[,substr(colnames(pdiet1), 1, 3)=="DHP"]
pdiet2
pdiet2 %>% select)-c("DHPWksbirth..Weeks.until.the.birth.when.DHP.was.completed")
pdiet2 %>% select(-c("DHPWksbirth..Weeks.until.the.birth.when.DHP.was.completed"))
pdiet3 = pdiet2 %>% select(-c("DHPWksbirth..Weeks.until.the.birth.when.DHP.was.completed"))
View(pdiet_raw)
colnames(pdiet_raw)
pdiet_raw$N9..Weight.gain.during.pregnancy.in.pounds
pdiet_raw %>% na.omit %>% select(typeof()=="double")
pdiet_raw %>% na.omit() %>% select(typeof()=="double")
pdiet_raw %>% na.omit()
pdiet1 = pdiet_raw %>% na.omit()
pdiet1 %>% select(typeof()=="double")
pdiet_raw %>% select(typeof()=="double")
pdiet1 = pdiet_raw %>% select_if(is.numeric)
pdiet1 = pdiet_raw %>% na.omit() %>% select_if(is.numeric)
View(pdiet1)
pdiet1 = pdiet_raw %>% filter(pregnancy_weight_gain>=0) %>% select_if(is.numeric)
pdiet1 = pdiet_raw %>% filter(N9..Weight.gain.during.pregnancy.in.pounds>=0) %>% select_if(is.numeric)
pdiet1 = pdiet_raw %>% filter(N9..Weight.gain.during.pregnancy.in.pounds>=0)
pdiet1 = pdiet_raw %>% filter(N9..Weight.gain.during.pregnancy.in.pounds>=0) %>% select_if(is.numeric)
pdiet1 = pdiet_raw %>% filter(N9..Weight.gain.during.pregnancy.in.pounds>=0)
pdiet1 %>% select_if(is.numeric)
typeof(pdiet1$N9..Weight.gain.during.pregnancy.in.pounds)
pdiet1$N9..Weight.gain.during.pregnancy.in.pounds = as.numeric(pdiet1$N9..Weight.gain.during.pregnancy.in.pounds)
pdiet1 %>% select_if(is.numeric)
pdiet 2 = pdiet1 %>% select_if(is.numeric)
pdiet2 = pdiet1 %>% select_if(is.numeric)
pdiet3 = pdiet2[,substr(colnames(pdiet1), 1, 3)=="DHP" || colnames(pdiet1) =="N9..Weight.gain.during.pregnancy.in.pounds"]
pdiet3 = pdiet2[,(substr(colnames(pdiet1), 1, 3)=="DHP") || (colnames(pdiet1) =="N9..Weight.gain.during.pregnancy.in.pounds")]
pdiet2x
pdiet2
colnames(pdiet2)
pdiet3 = pdiet2 %>% select(-c("DHPWksbirth..Weeks.until.the.birth.when.DHP.was.completed"))
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
rename(mother_age = cleaned_age..Adjusted.Age) %>% rename(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>%
rename(prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
View(pdiet3)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
rename(mother_age = cleaned_age..Adjusted.Age) %>% rename(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>% rename(prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds, mother_age = cleaned_age..Adjusted.Age,
poverty_income_ratio = PIRLEVEL..Income....of.poverty.,
prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
rename(mother_age = cleaned_age..Adjusted.Age) %>% rename(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>% rename(prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
rename(mother_age = cleaned_age..Adjusted.Age) %>% rename(poverty_income_ratio = PIRLEVEL..Income....of.poverty.)
pdiet4 = pdiet3 %>% mutate(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
mutate(mother_age = cleaned_age..Adjusted.Age) %>% mutate(poverty_income_ratio = PIRLEVEL..Income....of.poverty.)
pdiet4 = pdiet3 %>% mutate(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
mutate(mother_age = cleaned_age..Adjusted.Age) %>% mutate(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>% mutate(prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
View(pdiet4)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = "N9..Weight.gain.during.pregnancy.in.pounds")
library(dplyr)
pdiet4 = pdiet3 %>% rename(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds)
colnames(pdiet3)
pdiet4 = pdiet3 %>% mutate(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds)
pdiet4 = pdiet3 %>% mutate(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
mutate(mother_age = cleaned_age..Adjusted.Age) %>% mutate(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>% mutate(prepregnancy_bmi = BMI..Pre.pregnancy.BMI)
pdiet4 = pdiet3 %>% mutate(pregnancy_weight_gain = N9..Weight.gain.during.pregnancy.in.pounds) %>%
mutate(mother_age = cleaned_age..Adjusted.Age) %>% mutate(poverty_income_ratio = PIRLEVEL..Income....of.poverty.) %>% mutate(prepregnancy_bmi = BMI..Pre.pregnancy.BMI) %>% select(-c("N9..Weight.gain.during.pregnancy.in.pounds", "cleaned_age..Adjusted.Age", "PIRLEVEL..Income....of.poverty.", "BMI..Pre.pregnancy.BMI"))
colnames(pdiet4) = gsub("\\..*", "",colnames(pdiet4))
# omit nas and save
pdiet5 = pdiet4 %>% na.omit()
# filter to have weight gain of at least 0
pdiet1 = pdiet_raw %>% filter(N9..Weight.gain.during.pregnancy.in.pounds>=0)
# omit nas and save
pdiet5 = pdiet4 %>% na.omit()
# write cleaned dataset to file
write_csv(pdiet5, file =
"~/pregnancy-weight-gain-final-project/data/clean/pregnancy_data.csv")
# load cleaned data
pdiet_data = read.csv("./../data/clean/pregnancy_data.csv")
# calculate median weight gain
median_weight_gain = pdiet_data %>%
summarise(median(pregnancy_weight_gain)) %>%
pull()
# create histogram of weight gain during pregnancy
hist = pdiet_data %>%
ggplot(aes(x = pregnancy_weight_gain)) +
geom_histogram() +
geom_vline(xintercept = median_weight_gain,
linetype = "dashed") +
labs(x = "Weight gain during pregnancy",
y = "Number of women") +
theme_classic()
hist
# scatter plots of weight gain vs age, bmi, poverty/income ratio
age_scatter = pdiet_data %>% ggplot(aes(x=mother_age, y=pregnancy_weight_gain)) + geom_point() +
labs(x="age", y="weight gain during pregnancy") + theme_bw()
age_scatter
plot_grid(age_scatter, bmi_scatter, povincome_scatter)
bmi_scatter = pdiet_data %>% ggplot(aes(x=prepregnancy_bmi, y=pregnancy_weight_gain)) + geom_point() +
labs(x="BMI before pregnancy", y="weight gain during pregnancy") + theme_bw()
povincome_scatter = pdiet_data %>% ggplot(aes(x=poverty_income_ratio, y=pregnancy_weight_gain)) + geom_point() +
labs(x="poverty-income ratio", y="weight gain during pregnancy") + theme_bw()
plot_grid(age_scatter, bmi_scatter, povincome_scatter)
scatters = plot_grid(age_scatter, bmi_scatter, povincome_scatter)
ggsave(filename = "~/pregnancy-weight-gain-final-project/results/scatters.png",
plot = scatters,
device = "png",
width = 7,
height = 4)
# scatter plots of weight gain vs age, bmi, poverty/income ratio
age_scatter = pdiet_data %>% ggplot(aes(x=mother_age, y=pregnancy_weight_gain)) + geom_point() +
labs(x="age", y="pregnancy weight gain") + theme_bw()
bmi_scatter = pdiet_data %>% ggplot(aes(x=prepregnancy_bmi, y=pregnancy_weight_gain)) + geom_point() +
labs(x="BMI before pregnancy", y="pregnancy weight gain") + theme_bw()
povincome_scatter = pdiet_data %>% ggplot(aes(x=poverty_income_ratio, y=pregnancy_weight_gain)) + geom_point() +
labs(x="poverty-income ratio", y="pregnancy weight gain") + theme_bw()
scatters = plot_grid(age_scatter, bmi_scatter, povincome_scatter)
scatters
ggsave(filename = "~/pregnancy-weight-gain-final-project/results/scatters.png",
plot = scatters,
device = "png",
width = 7,
height = 4)
top10 = flattenCorrMatrix(corr) %>% slice_max(corr, n=10)
top10
top10 = flattenCorrMatrix(corr) %>% slice_max(cor, n=10)
top10
knitr::opts_chunk$set(echo = TRUE)
# load cleaned data
pdiet_data = read.csv("./../data/clean/pregnancy_data.csv")
# split into train and test
set.seed(5) # seed set for reproducibility (DO NOT CHANGE)
n = nrow(pdiet_data)
train_samples = sample(1:n, round(0.8*n))
# split data into training and test sets
pdiet_train = pdiet_data[train_samples,]
pdiet_test = pdiet_data[-train_samples,]
# save the train and test data
write_csv(x = pdiet_train, file = "./../data/clean/pdiet_train.csv")
write_csv(x = pdiet_test, file = "./../data/clean/pdiet_test.csv")
# load cleaned data
pdiet_data = read.csv("./../data/clean/pregnancy_data.csv")
# load cleaned data
pdiet_data = read.csv("./../data/clean/pregnancy_data.csv")
# split into train and test
set.seed(5) # seed set for reproducibility (DO NOT CHANGE)
n = nrow(pdiet_data)
train_samples = sample(1:n, round(0.8*n))
# split data into training and test sets
pdiet_train = pdiet_data[train_samples,]
pdiet_test = pdiet_data[-train_samples,]
#load libraries
library(glmnetUtils)  #for ridge regression
source("functions/plot_glmnet.R")   #for ridge trace plot
# load in training and test data
pdiet_test = read.csv("./../data/clean/pdiet_test.csv")
# load in training data
pdiet_train = read_csv("./../data/clean/pdiet_train.csv", show_col_types = FALSE)
# run linear regression on DHP variables (numeric)
lm_fit = lm(formula = pregnancy_weight_gain ~ ., data = pdiet_train)
# print summary
summary(lm_fit)
#save linear regression fit
save(lm_fit, file = "./../results/lm_fit.Rda")
# print summary
summary(lm_fit)
lm_fit %>% plot(aes(x = resid(lm_fit), y = pregnancy_weight_gain)) + geom_point()
lm_fit %>% plot(aes(x = resid(lm_fit), y = pdiet_train$pregnancy_weight_gain)) + geom_point()
hist(res)
ggplot(aes(x = res)) +
geom_histogram()#save linear regression fit
res = resid(lm_fit)
res
res.values()
res
res = resid(lm_fit) %>% as.numeric()
res
ggplot(aes(x = res)) +
geom_histogram()#save linear regression fit
ggplot(aes(x = data.frame(res))) +
geom_histogram()#save linear regression fit
ggplot(aes(x = data.frame(res)), data = res) +
geom_histogram()#save linear regression fit
res = resid(lm_fit) %>% as.numeric()
typeof(res)
ggplot(data = pdiet_train, aes(x = lm_fit$residuals)) +
geom_histogram(fill = 'steelblue', color = 'black')
ggplot(data = pdiet_train, aes(x = lm_fit$residuals)) +
geom_histogram() + theme_bw()
ggplot(data = pdiet_train, aes(x = lm_fit$residuals)) +
geom_histogram() + theme_bw() + labs(x= "residuals")
# residual histogram
res_hist = ggplot(data = pdiet_train, aes(x = lm_fit$residuals)) +
geom_histogram() + theme_bw() + labs(x= "residuals")
# save plot
ggsave(filename = "./../results/residuals-hist.png",
plot = res_hist,
device = "png",
width = 6,
height = 4)
# save linear regression fit
save(lm_fit, file = "./../results/lm_fit.Rda")
range(res)
# run ridge regression
set.seed(5)
ridge_fit = cv.glmnet( pregnancy_weight_gain ~ .,
alpha = 0,
nfolds = 10,
data = pdiet_train)
#save ridge fit
save(ridge_fit, file = "./../results/ridge_fit.Rda")
# plot ridge fit (CV plot)
plot(ridge_fit)
# save ridge CV plot
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "./../results/ridge-cv-plot.png")
plot(ridge_fit)
dev.off()
# plot ridge fit (CV plot)
plot(ridge_fit)
#plot trace plot
l_ridge_fit = plot_glmnet(ridge_fit, pdiet_train, features_to_plot = 6)
l_ridge_fit
# save ridge trace plot
ggsave(filename = "./../results/ridge-trace-plot.png",
plot = l_ridge_fit,
device = "png",
width = 6,
height = 4)
l_ridge_fit
#load libraries
library(glmnetUtils)  #for ridge regression
source("functions/plot_glmnet.R")   #for ridge trace plot
plot_glmnet(ridge_fit, pdiet_train, features_to_plot = 6)
#plot trace plot
l_ridge_fit = plot_glmnet(ridge_fit, pdiet_train, features_to_plot = 6)
l_ridge_fit
# save ridge trace plot
ggsave(filename = "./../results/ridge-trace-plot.png",
plot = l_ridge_fit,
device = "png",
width = 6,
height = 4)
# evaluate OLSR RMSE
lm_predictions = predict(lm_fit, newdata = pregnancy_train)
# evaluate OLSR RMSE
lm_predictions = predict(lm_fit, newdata = pdiet_train)
lm_RMSE = sqrt(mean((lm_predictions-pdiet_train$pregnancy_weight_gain)^2))
# evaluate ridge RMSE
ridge_predictions = predict(ridge_fit,
newdata = pdiet_train,
s = "lambda.1se") %>%
as.numeric()
ridge_RMSE = sqrt(mean((ridge_predictions-pdiet_train$pregnancy_weight_gain)^2))
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(tidyverse)     # tidyverse
library(kableExtra)
library(ggplot2)
# load in training and test data
pregnancy_train = read.csv("./../data/clean/pdiet_train.csv")
pregnancy_test = read.csv("./../data/clean/pdiet_test.csv")
# run random forest with default parameters
set.seed(5) # for reproducibility (DO NOT CHANGE)
rf_fit = randomForest(pregnancy_weight_gain ~ ., data = pregnancy_train)
# save
png(file='~/pregnancy-weight-gain-final-project/results/error-B.png')
plot(rf_fit)
dev.off()
error_B
plot(rf_fit)
31/3
# tune for optimal value of m
mvalues = seq(1,31)
oob_errors = numeric(length(mvalues))
ntree = 100
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(pregnancy_weight_gain ~ ., mtry = m, data = pregnancy_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
tibble(m = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues, guide = guide_axis(check.overlap = TRUE)) +
theme_bw()
min(oob_errors)
oob_errors
# make plot of error vs m
error_m = tibble(m = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues, guide = guide_axis(check.overlap = TRUE)) +
theme_bw()
# save
ggsave(filename = "~/pregnancy-weight-gain-final-project/results/error-versus-m.png",
plot = error_m,
device = "png",
width = 7,
height = 4)
rfit_final = randomForest(pregnancy_weight_gain ~ ., mtry = 28, ntree = 100, importance = TRUE, data = pregnancy_train)
#save random forest fit
save(rfit_final, file = "./../results/rf_fit.Rda")
# variable importance plots
png(file='~/pregnancy-weight-gain-final-project/results/var-imp.png')
varImpPlot(rfit_final, n.var = 15)
dev.off()
varImpPlot(rfit_final, n.var = 15)
# calculate train rmse
train_rf_probabilities = predict(rfit_final, newdata = pregnancy_train)
train_RMSE_rf = sqrt(mean((train_rf_probabilities - pregnancy_train$pregnancy_weight_gain)^2))
train_RMSE_rf
library(glmnetUtils)
library(tidyverse)
library(kableExtra)
pdiet_test = read_csv("./../data/clean/pdiet_test.csv", show_col_types = FALSE)
#load linear regression fit
load("./../results/lm_fit.Rda")
# load ridge fit
load("./../results/ridge_fit.Rda")
# load random forest fit
load("./../results/rf_fit.Rda")
# evaluate linear regression RMSE
linear_predictions = predict(lm_fit, newdata = pdiet_test)
linear_RMSE = sqrt(mean((linear_predictions - pdiet_test$pregnancy_weight_gain)^2))
# evaluate ridge regression RMSE
ridge_predictions = predict(ridge_fit,
newdata = pdiet_test,
s = "lambda.1se") %>% as.numeric()
ridge_RMSE = sqrt(mean((ridge_predictions - pdiet_test$pregnancy_weight_gain)^2))
# evaluate random forest RMSE
rf_predictions = predict(rfit_final, newdata = pdiet_test)
rf_RMSE = sqrt(mean((test_rf_probabilities - pdiet_test$pregnancy_weight_gain)^2))
# evaluate random forest RMSE
rf_predictions = predict(rfit_final, newdata = pdiet_test)
rf_RMSE = sqrt(mean((rf_predictions - pdiet_test$pregnancy_weight_gain)^2))
#make table
error_for_models = tribble(
~Model, ~RMSE,
#------/-------
"Linear", linear_RMSE,
"Ridge", ridge_RMSE,
"Random Forest", rf_RMSE
)
tibble(Method = c("OLSR", "Ridge", "Random Forest"), `Test RMSE` = c(linear_RMSE, ridge_RMSE, rf_RMSE)) %>%
write_tsv("./../results/model-evaluation.tsv")
error_for_models
knitr::opts_chunk$set(echo = TRUE)
# run all steps of the analysis pipeline
source("code/0-download.Rmd")
# run all steps of the analysis pipeline
source("./../code/0-download.Rmd")
source("./../code/1-cleaning-updated.Rmd")
source("./../code/2-exploration.Rmd")
# run all steps of the analysis pipeline
source("./../code/1-cleaning-updated.Rmd")
source("./../code/2-exploration.Rmd")
source("./../code/3-train-test-split.Rmd")
source("./../code/4-regression-modeling.Rmd")
source("./../code/5-tree-modeling.Rmd")
source("./../code/6-model-evaluation.Rmd")
source("./../code/1-cleaning-updated.Rmd")
source("/Users/samsimon/pregnancy-weight-gain-final-project/code/1-cleaning_updated.Rmd")
